/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hermes.gui.renderers;

import com.hermes.common.HUser;
import com.hermes.common.constants.HAdminLevel;
import java.awt.Color;
import java.awt.Component;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author joaquin
 */
public class UserRenderer extends javax.swing.JPanel implements ListCellRenderer<HUser>
{

    /**
     * Creates new form UserRenderer
     */
    public UserRenderer()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        LAvatar = new javax.swing.JLabel();
        LUsername = new javax.swing.JLabel();
        LPersonalMessage = new javax.swing.JLabel();
        LASL = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 1, 5, 1));

        LUsername.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        LUsername.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LUsername.setMaximumSize(new java.awt.Dimension(10, 21));
        LUsername.setMinimumSize(new java.awt.Dimension(10, 21));
        LUsername.setPreferredSize(new java.awt.Dimension(10, 21));

        LPersonalMessage.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        LPersonalMessage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LPersonalMessage.setMaximumSize(new java.awt.Dimension(2, 21));
        LPersonalMessage.setMinimumSize(new java.awt.Dimension(2, 21));
        LPersonalMessage.setPreferredSize(new java.awt.Dimension(2, 21));

        LASL.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        LASL.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        LASL.setMaximumSize(new java.awt.Dimension(2, 21));
        LASL.setMinimumSize(new java.awt.Dimension(2, 21));
        LASL.setPreferredSize(new java.awt.Dimension(2, 21));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(LAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addComponent(LPersonalMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LASL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(LAvatar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(LUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(LPersonalMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(LASL, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LASL;
    private javax.swing.JLabel LAvatar;
    private javax.swing.JLabel LPersonalMessage;
    private javax.swing.JLabel LUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getListCellRendererComponent(JList<? extends HUser> list, HUser value, int index, boolean isSelected, boolean cellHasFocus)
    {
        if(isSelected)
        {
            setBackground(new Color(195,195,195));
            setForeground(list.getSelectionForeground());
        }
        else
        {
            setBackground(Color.WHITE);
        }
        if(value.getAvatar()!=null)
        {
            LAvatar.setIcon(value.getAvatar());            
        }
        else
        {
            LAvatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermes/resources/images/noAvatar.png")));    
        }
        
       if(value.getLevel()==HAdminLevel.Moderator)
       {
           LUsername.setForeground(Color.BLUE);
       }
       else if( value.getLevel()==HAdminLevel.Administratior)
       {
           LUsername.setForeground(new Color(0,128,0));
       }
       else if( value.getLevel()==HAdminLevel.Host)
       {
           LUsername.setForeground(Color.RED);
       }
       else
       {
            LUsername.setForeground(Color.BLACK);
       }
        
        LUsername.setText(value.getUsername());
        LUsername.validate();
        
        LPersonalMessage.setText(value.getPersonalMessage());
        String asl=value.getAge()+"/"+value.getGender()+"/";
        
        if(value.getRegion().trim().equals(""))
        {
            asl+=value.getCountry();
        }
        else
        {
            asl+=value.getRegion()+","+value.getCountry();
        }
        
        LASL.setText(asl);
        return this;
    }
}
