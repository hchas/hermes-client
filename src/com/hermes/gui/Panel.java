/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hermes.gui;

import com.hermes.client.HCChannel;
import com.hermes.client.HCUser;
import com.hermes.client.HClient;
import com.hermes.client.events.HClientAckEvent;
import com.hermes.client.events.HClientAvatarEvent;
import com.hermes.client.events.HClientEmoteEvent;
import com.hermes.client.events.HClientEvent;
import com.hermes.client.events.HClientMessageEvent;
import com.hermes.client.events.HClientNoSuchEvent;
import com.hermes.client.events.HClientPersonalMessageEvent;
import com.hermes.client.events.HClientRedirectedEvent;
import com.hermes.client.events.HClientTopicEvent;
import com.hermes.client.events.HClientUrlEvent;
import com.hermes.client.events.HClientUserEvent;
import com.hermes.client.events.HClientUserListevent;
import com.hermes.client.events.HClientUserUpdateEvent;
import com.hermes.client.events.HIClientEvents;
import com.hermes.common.AresFormater;
import com.hermes.common.HChannel;
import com.hermes.common.HUser;
import com.hermes.common.constants.HAdminLevel;
import com.hermes.Main;
import com.hermes.events.ChannelPaneEvents;
import com.hermes.gui.dialogs.ColorDialog;
import com.hermes.gui.dialogs.EmoticonsDialog;
import com.hermes.gui.renderers.UserRenderer;
import com.hermes.util.DesktopApi;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JTabbedPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author jomartinez
 */
public class Panel extends javax.swing.JPanel implements HIClientEvents {

    private HClient client;
    private ChatPane main;
    private String url;
    private HashMap<String, ChatPane> privates;
    private ChannelPaneEvents event;
    private HChannel channel;

    public Panel(HCUser user, HChannel channel, ChannelPaneEvents event) throws IOException {
        initComponents();
        this.channel = channel;
        this.event = event;

        TBBar.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 0));
        this.main = new ChatPane();
        TPTabs.add("Main Chat", main);

        privates = new HashMap<String, ChatPane>();

        client = new HClient(user);
        client.addClientEventListener(this);

        if (channel.getTopic() != null) {
            LTopic.setText("<html>" + AresFormater.getInstance().toHTML(channel.getTopic()));
        }

        TFInput.requestFocus();

        LUsers.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent evt) {
                JList<HUser> list = (JList) evt.getSource();
                if (evt.getClickCount() == 2) {
                    // Double-click detected
                    int index = list.locationToIndex(evt.getPoint());
                    
                    if(index>list.getModel().getSize()-1)
                    {
                        index=list.getModel().getSize()-1;
                    }
                    HUser u = list.getModel().getElementAt(index);

                    try {
                        addPrivate(u.getUsername(), true);
                    } catch (Exception ex) {
                        Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        });

    }

    public HClient getClient() {
        return client;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PMUserListMenu = new javax.swing.JPopupMenu();
        MICopy = new javax.swing.JMenuItem();
        MIIgnore_Unignore = new javax.swing.JMenuItem();
        SPSplitter = new javax.swing.JSplitPane();
        PChat = new javax.swing.JPanel();
        TBBar = new javax.swing.JToolBar();
        BBold = new javax.swing.JButton();
        BItalic = new javax.swing.JButton();
        BUnderline = new javax.swing.JButton();
        BForeground = new javax.swing.JButton();
        BBackground = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 20), new java.awt.Dimension(10, 20), new java.awt.Dimension(10, 32767));
        BEmoticon = new javax.swing.JButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        LURL = new javax.swing.JLabel();
        TPTabs = new javax.swing.JTabbedPane();
        TFInput = new javax.swing.JTextField();
        PList = new javax.swing.JPanel();
        SPUsers = new javax.swing.JScrollPane();
        LUsers = new javax.swing.JList();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        LTopic = new javax.swing.JLabel();

        PMUserListMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                PMUserListMenuPopupMenuWillBecomeVisible(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                PMUserListMenuPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        MICopy.setText("Copy");
        MICopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MICopyActionPerformed(evt);
            }
        });
        PMUserListMenu.add(MICopy);

        MIIgnore_Unignore.setText("Ignore");
        MIIgnore_Unignore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIIgnore_UnignoreActionPerformed(evt);
            }
        });
        PMUserListMenu.add(MIIgnore_Unignore);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        SPSplitter.setBorder(null);
        SPSplitter.setDividerLocation(976);
        SPSplitter.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                SPSplitterComponentResized(evt);
            }
        });

        TBBar.setFloatable(false);
        TBBar.setRollover(true);
        TBBar.setMinimumSize(new java.awt.Dimension(10, 31));
        TBBar.setPreferredSize(new java.awt.Dimension(148, 22));

        BBold.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BBold.setText("<html><b>B</b></html>");
        BBold.setToolTipText("");
        BBold.setActionCommand("");
        BBold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BBold.setMaximumSize(new java.awt.Dimension(20, 20));
        BBold.setMinimumSize(new java.awt.Dimension(20, 20));
        BBold.setPreferredSize(new java.awt.Dimension(20, 20));
        BBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBoldActionPerformed(evt);
            }
        });
        TBBar.add(BBold);

        BItalic.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BItalic.setText("<html><i>I</i></html>");
        BItalic.setToolTipText("");
        BItalic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BItalic.setMaximumSize(new java.awt.Dimension(20, 20));
        BItalic.setMinimumSize(new java.awt.Dimension(20, 20));
        BItalic.setPreferredSize(new java.awt.Dimension(20, 20));
        BItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BItalicActionPerformed(evt);
            }
        });
        TBBar.add(BItalic);

        BUnderline.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BUnderline.setText("<html><u>U</U></html>");
        BUnderline.setToolTipText("");
        BUnderline.setMaximumSize(new java.awt.Dimension(20, 20));
        BUnderline.setMinimumSize(new java.awt.Dimension(20, 20));
        BUnderline.setPreferredSize(new java.awt.Dimension(20, 20));
        BUnderline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BUnderlineActionPerformed(evt);
            }
        });
        TBBar.add(BUnderline);

        BForeground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/fg.png"))); // NOI18N
        BForeground.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BForeground.setMaximumSize(new java.awt.Dimension(20, 20));
        BForeground.setMinimumSize(new java.awt.Dimension(20, 20));
        BForeground.setPreferredSize(new java.awt.Dimension(20, 20));
        BForeground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BForegroundActionPerformed(evt);
            }
        });
        TBBar.add(BForeground);

        BBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/bg.png"))); // NOI18N
        BBackground.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BBackground.setMaximumSize(new java.awt.Dimension(20, 20));
        BBackground.setMinimumSize(new java.awt.Dimension(20, 20));
        BBackground.setPreferredSize(new java.awt.Dimension(20, 20));
        BBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBackgroundActionPerformed(evt);
            }
        });
        TBBar.add(BBackground);
        TBBar.add(filler1);

        BEmoticon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/emoti.png"))); // NOI18N
        BEmoticon.setFocusable(false);
        BEmoticon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BEmoticon.setMaximumSize(new java.awt.Dimension(20, 20));
        BEmoticon.setMinimumSize(new java.awt.Dimension(20, 20));
        BEmoticon.setPreferredSize(new java.awt.Dimension(20, 20));
        BEmoticon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BEmoticon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BEmoticonActionPerformed(evt);
            }
        });
        TBBar.add(BEmoticon);
        TBBar.add(filler4);

        LURL.setMaximumSize(null);
        LURL.setMinimumSize(new java.awt.Dimension(60, 19));
        LURL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LURLMouseClicked(evt);
            }
        });
        TBBar.add(LURL);

        TPTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TPTabsStateChanged(evt);
            }
        });

        TFInput.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        TFInput.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        TFInput.setMargin(new java.awt.Insets(2, 50, 2, 2));
        TFInput.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        TFInput.setSelectionColor(new java.awt.Color(224, 227, 206));
        TFInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFInputKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout PChatLayout = new javax.swing.GroupLayout(PChat);
        PChat.setLayout(PChatLayout);
        PChatLayout.setHorizontalGroup(
            PChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PChatLayout.createSequentialGroup()
                .addGroup(PChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PChatLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(TBBar, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE))
                    .addGroup(PChatLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TFInput, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PChatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TPTabs))
        );
        PChatLayout.setVerticalGroup(
            PChatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PChatLayout.createSequentialGroup()
                .addComponent(TPTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(TBBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(TFInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SPSplitter.setLeftComponent(PChat);

        SPUsers.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        LUsers.setBackground(new java.awt.Color(248, 248, 248));
        LUsers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        LUsers.setModel(new DefaultListModel<HCUser>());
        LUsers.setCellRenderer(new UserRenderer());
        LUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LUsersMouseClicked(evt);
            }
        });
        SPUsers.setViewportView(LUsers);

        javax.swing.GroupLayout PListLayout = new javax.swing.GroupLayout(PList);
        PList.setLayout(PListLayout);
        PListLayout.setHorizontalGroup(
            PListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SPUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
            .addComponent(filler2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        PListLayout.setVerticalGroup(
            PListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PListLayout.createSequentialGroup()
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SPUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        SPSplitter.setRightComponent(PList);

        LTopic.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        LTopic.setText("TOPIC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LTopic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(SPSplitter)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(LTopic)
                .addGap(10, 10, 10)
                .addComponent(SPSplitter))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BBoldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BBoldActionPerformed
    {//GEN-HEADEREND:event_BBoldActionPerformed
        try {
            TFInput.getDocument().insertString(TFInput.getCaretPosition(), "" + ((char) 2) + ((int) AresFormater.BOLD_CHARACTER), null);
            TFInput.requestFocus();
        } catch (BadLocationException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BBoldActionPerformed

    private void BItalicActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BItalicActionPerformed
    {//GEN-HEADEREND:event_BItalicActionPerformed
        try {
            TFInput.getDocument().insertString(TFInput.getCaretPosition(), "" + ((char) 2) + ((int) AresFormater.ITALIC_CHARACTER), null);
            TFInput.requestFocus();
        } catch (BadLocationException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BItalicActionPerformed

    private void BUnderlineActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BUnderlineActionPerformed
    {//GEN-HEADEREND:event_BUnderlineActionPerformed
        try {
            TFInput.getDocument().insertString(TFInput.getCaretPosition(), "" + ((char) 2) + ((int) AresFormater.UNDERLINE_CHARACTER), null);
            TFInput.requestFocus();
        } catch (BadLocationException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BUnderlineActionPerformed

    private void BForegroundActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BForegroundActionPerformed
    {//GEN-HEADEREND:event_BForegroundActionPerformed
        ColorDialog c = new ColorDialog(null, false);
        c.setModal(true);
        c.setLocation((int) BForeground.getLocationOnScreen().getX() - 50, (int) BForeground.getLocationOnScreen().getY() - 125);
        c.setVisible(true);
        if (c.getColorCode() != null) {
            try {
                TFInput.getDocument().insertString(TFInput.getCaretPosition(), AresFormater.FOREGROUND_CHARACTER + c.getColorCode(), null);
            } catch (BadLocationException ex) {
                Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            TFInput.requestFocus();
        }
    }//GEN-LAST:event_BForegroundActionPerformed

    private void BBackgroundActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BBackgroundActionPerformed
    {//GEN-HEADEREND:event_BBackgroundActionPerformed
        ColorDialog c = new ColorDialog(null, false);
        c.setModal(true);
        c.setLocation((int) BBackground.getLocationOnScreen().getX() - 50, (int) BBackground.getLocationOnScreen().getY() - 125);
        c.setVisible(true);
        if (c.getColorCode() != null) {
            try {
                TFInput.getDocument().insertString(TFInput.getCaretPosition(), AresFormater.BACKGROUND_CHARACTER + c.getColorCode(), null);
            } catch (BadLocationException ex) {
                Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            TFInput.requestFocus();
        }
    }//GEN-LAST:event_BBackgroundActionPerformed

    private void BEmoticonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BEmoticonActionPerformed
    {//GEN-HEADEREND:event_BEmoticonActionPerformed
        EmoticonsDialog ed = new EmoticonsDialog(null, true);

        JRootPane rootPane = ((JDialog) ed).getRootPane();
        rootPane.setWindowDecorationStyle(JRootPane.NONE);

        ed.setLocation(BEmoticon.getLocationOnScreen().x - ed.getWidth() + 90, BEmoticon.getLocationOnScreen().y - 120);
        ed.setVisible(true);

        if (ed.getSelected() != null) {
            try {
                TFInput.getDocument().insertString(TFInput.getCaretPosition(), ed.getSelected(), null);
            } catch (BadLocationException ex) {
                Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            TFInput.requestFocus();
        }
    }//GEN-LAST:event_BEmoticonActionPerformed

    private void LURLMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_LURLMouseClicked
    {//GEN-HEADEREND:event_LURLMouseClicked
        try {

            DesktopApi.browse(new URI(this.url));
        } catch (URISyntaxException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LURLMouseClicked

    private void TFInputKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_TFInputKeyPressed
    {//GEN-HEADEREND:event_TFInputKeyPressed
        if (evt.getKeyCode() == 10) {
            String text = TFInput.getText();
            text = text.replace(((char) 2) + "6", "" + AresFormater.BOLD_CHARACTER);
            text = text.replaceAll(((char) 2) + "7", "" + AresFormater.UNDERLINE_CHARACTER);
            text = text.replaceAll(((char) 2) + "9", "" + AresFormater.ITALIC_CHARACTER);

            if (TPTabs.getSelectedIndex() == 0) {
                try {
                    if (text.startsWith("/me")) {

                        client.sendEmote(text.substring(3));
                    } else if (text.startsWith("/") || text.startsWith("#")) {
                        client.sendCommand(text.substring(1));
                    } else {
                        client.sendMessage(text);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                String to = TPTabs.getTitleAt(TPTabs.getSelectedIndex());
                client.sendPM(to, text);

                ChatPane cp = ((ChatPane) TPTabs.getComponentAt(TPTabs.getSelectedIndex()));
                cp.write(AresFormater.BOLD_CHARACTER + "Me:");
                cp.write("        " + text);

            }

            TFInput.setText("");
        }
    }//GEN-LAST:event_TFInputKeyPressed

    private void SPSplitterComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_SPSplitterComponentResized
    {//GEN-HEADEREND:event_SPSplitterComponentResized
        SPSplitter.setDividerLocation(0.80);
    }//GEN-LAST:event_SPSplitterComponentResized

    private void LUsersMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_LUsersMouseClicked
    {//GEN-HEADEREND:event_LUsersMouseClicked
        LUsers.setSelectedIndex(LUsers.locationToIndex(evt.getPoint()));
        
        if(evt.getButton()==MouseEvent.BUTTON3)
        {
            PMUserListMenu.show(LUsers, evt.getX(),evt.getY());
        }
    }//GEN-LAST:event_LUsersMouseClicked

    private void MICopyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MICopyActionPerformed
    {//GEN-HEADEREND:event_MICopyActionPerformed

        try {
            TFInput.getDocument().insertString(TFInput.getCaretPosition(), ((HCUser) LUsers.getSelectedValue()).getUsername(), null);
        } catch (BadLocationException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        TFInput.requestFocus();
    }//GEN-LAST:event_MICopyActionPerformed

    private void MIIgnore_UnignoreActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_MIIgnore_UnignoreActionPerformed
    {//GEN-HEADEREND:event_MIIgnore_UnignoreActionPerformed
        client.ignore(((HCUser) LUsers.getSelectedValue()));
    }//GEN-LAST:event_MIIgnore_UnignoreActionPerformed

    private void PMUserListMenuPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_PMUserListMenuPopupMenuWillBecomeInvisible
    {//GEN-HEADEREND:event_PMUserListMenuPopupMenuWillBecomeInvisible
        if (PMUserListMenu.getComponentCount() > 3) {

            if (client.getAdminLevel() != HAdminLevel.Normal_User) {
                for (int i = 0; i < 4; i++) {
                    PMUserListMenu.remove(2);
                }
            }
            if (client.getAdminLevel() == HAdminLevel.Host) {
                for (int i = 0; i < 4; i++) {
                    PMUserListMenu.remove(2);
                }
            }

        }

    }//GEN-LAST:event_PMUserListMenuPopupMenuWillBecomeInvisible

    private void PMUserListMenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt)//GEN-FIRST:event_PMUserListMenuPopupMenuWillBecomeVisible
    {//GEN-HEADEREND:event_PMUserListMenuPopupMenuWillBecomeVisible

        if (PMUserListMenu.getComponentCount() < 3) {
            final HCUser usr = (HCUser) LUsers.getSelectedValue();

            if (client.getAdminLevel() != HAdminLevel.Normal_User)
            {
                JMenuItem MIMuzzle = new JMenuItem("Muzzle");
                MIMuzzle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/muzzle.png")));
                MIMuzzle.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("muzzle " + usr.getUsername());
                    }
                });

                JMenuItem MIKill = new JMenuItem("Kill");
                MIKill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/kill.png")));
                MIKill.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("kill " + usr.getUsername());
                    }
                });

                JMenuItem MIBan = new JMenuItem("Ban");
                MIBan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/ban.png")));
                MIBan.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("ban " + usr.getUsername());
                    }
                });

                PMUserListMenu.add(new JPopupMenu.Separator());
                PMUserListMenu.add(MIMuzzle);
                PMUserListMenu.add(MIKill);
                PMUserListMenu.add(MIBan);

            }
            if (client.getAdminLevel() == HAdminLevel.Host) {
                JMenuItem MIMuzzle = new JMenuItem("Host Muzzle");
                MIMuzzle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/muzzle.png")));
                MIMuzzle.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("hostmuzzle " + usr.getUsername());
                    }
                });

                JMenuItem MIKill = new JMenuItem("Host Kill");
                MIKill.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/kill.png")));
                MIKill.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("hostkill " + usr.getUsername());
                    }
                });

                JMenuItem MIBan = new JMenuItem("Host Ban");
                MIBan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/ban.png")));
                MIKill.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        client.sendCommand("hostban " + usr.getUsername());
                    }
                });

                PMUserListMenu.add(new JPopupMenu.Separator());
                PMUserListMenu.add(MIMuzzle);
                PMUserListMenu.add(MIKill);
                PMUserListMenu.add(MIBan);
            }
        }

    }//GEN-LAST:event_PMUserListMenuPopupMenuWillBecomeVisible

    private void TPTabsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_TPTabsStateChanged
    {//GEN-HEADEREND:event_TPTabsStateChanged
        if (TPTabs.getSelectedIndex() == 0) {
            String title = TPTabs.getTitleAt(TPTabs.getSelectedIndex()).replaceAll("\\<.*?>","");
            TPTabs.setTitleAt(TPTabs.getSelectedIndex(), title);
        } else {
            JPanel p = ((JPanel) TPTabs.getTabComponentAt(TPTabs.getSelectedIndex()));

            JLabel lTitle = ((JLabel) p.getComponent(0));
            lTitle.setFont(lTitle.getFont().deriveFont(Font.PLAIN, lTitle.getFont().getSize()));

        }

    }//GEN-LAST:event_TPTabsStateChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
    {//GEN-HEADEREND:event_formComponentShown
        TFInput.requestFocus();
    }//GEN-LAST:event_formComponentShown

    private void updateusers() {
        LUsers.revalidate();
        LUsers.repaint();
    }

    private void addUser(HUser usr) {
        ((DefaultListModel<HUser>) LUsers.getModel()).addElement(usr);
        SPUsers.repaint();
    }

    private void removeUser(HUser usr) {
        ((DefaultListModel<HUser>) LUsers.getModel()).removeElement(usr);
        LUsers.repaint();
    }

    private JPanel getTitlePanel(final JTabbedPane tabbedPane, final JPanel panel, String title) {
        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 3, 0));
        titlePanel.setOpaque(false);

        JLabel titleLbl = new JLabel(title);
        titleLbl.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        titlePanel.add(titleLbl);

        JButton closeButton = new JButton(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/close.png")));
        closeButton.setBorderPainted(false);
        closeButton.setFocusPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setRolloverEnabled(true);
        closeButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hermes/resources/images/close-over.png")));
        Dimension d = new Dimension(16, 16);
        closeButton.setSize(d);
        closeButton.setPreferredSize(d);
        closeButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                tabbedPane.remove(panel);
            }
        });
        titlePanel.add(closeButton);

        return titlePanel;
    }

    private void addPrivate(String userName, boolean giveFocus) throws Exception {
        ChatPane cp;

        if (!privates.containsKey(userName)) {
            cp = new ChatPane();
            TPTabs.add(cp, userName);
            privates.put(userName, cp);
            int index = TPTabs.indexOfComponent(cp);
            TPTabs.setTabComponentAt(index, getTitlePanel(TPTabs, cp, userName));
        } else {
            cp = privates.get(userName);

            if (TPTabs.indexOfComponent(cp) == -1) {
                TPTabs.add(cp, userName);
                int index = TPTabs.indexOfComponent(cp);
                TPTabs.setTabComponentAt(index, getTitlePanel(TPTabs, cp, userName));
            }
        }

        if (giveFocus) {
            TPTabs.setSelectedIndex(TPTabs.getTabCount() - 1);
        }
    }

    public void close() {
        try {
            client.disconnect();
        } catch (IOException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void connect() {
        main.write(AresFormater.FOREGROUND_CHARACTER + "02Connecting to host, please wait...");
        try {
            client.connect(channel.getPublicIP(), channel.getPort());
        } catch (IOException ex) {
            HClientEvent e = new HClientEvent();
            onDisconnect(e);
        }
    }

    public void update(HCUser newUser) {
        client.setUser(newUser);
        client.actionPerformed(new ActionEvent(newUser, 43, ""));
        client.sendPersonalMessage(newUser.getPersonalMessage());
        client.sendAvatar();
    }

    @Override
    public void onPublicMessage(HClientMessageEvent evt) {
        main.write(AresFormater.FOREGROUND_CHARACTER + "01" + evt.getSender() + "> " + AresFormater.FOREGROUND_CHARACTER + "12" + evt.getText());
        event.onTextRecived(this);

        if ((TPTabs.getSelectedIndex() != 0)) {
            TPTabs.setTitleAt(0, "<html><i>" + TPTabs.getTitleAt(0).replaceAll("\\<.*?>","") + "</i></html>");
        }

    }

    @Override
    public void onPrivateMessage(HClientMessageEvent evt) {
        try {
            addPrivate(evt.getSender(), false);
            ChatPane cp = privates.get(evt.getSender());
            cp.write(AresFormater.BOLD_CHARACTER + evt.getSender() + ":");
            cp.write("        " + evt.getText());
            event.onTextRecived(this);

            int index = TPTabs.indexOfComponent(cp);

            if (index != -1 && TPTabs.getSelectedIndex() != index) {
                JPanel p = ((JPanel) TPTabs.getTabComponentAt(index));

                JLabel lTitle = ((JLabel) p.getComponent(0));
                lTitle.setFont(lTitle.getFont().deriveFont(Font.ITALIC, lTitle.getFont().getSize()));
            }
        } catch (Exception ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onNoSuch(HClientNoSuchEvent evt) {
        main.write(AresFormater.FOREGROUND_CHARACTER + "04" + evt.getNoSuch());
        event.onTextRecived(this);
    }

    @Override
    public void onJoin(HClientUserEvent evt) {
        addUser(evt.getUser());
        main.write(AresFormater.FOREGROUND_CHARACTER + "03" + evt.getUser() + " has join the channel");
    }

    @Override
    public void onPart(HClientUserEvent evt) {

        main.write(AresFormater.FOREGROUND_CHARACTER + "07" + evt.getUser() + " has part the channel");
        removeUser(evt.getUser());
    }

    @Override
    public void onPersonalMessage(HClientPersonalMessageEvent evt) {
        updateusers();
    }

    @Override
    public void onAvatar(HClientAvatarEvent evt) {

    }

    @Override
    public void onEmote(HClientEmoteEvent evt) {
        main.write(AresFormater.FOREGROUND_CHARACTER + "06* " + evt.getUsername() + " " + evt.getEmote());
    }

    @Override
    public void onURL(HClientUrlEvent evt) {
        LURL.setText("<html><a href=\"" + evt.getUrl() + "\">" + evt.getUrlCaption() + "<a/>");
        LURL.setToolTipText(evt.getUrl());
        url = evt.getUrl();
    }

    @Override
    public void onTopic(HClientTopicEvent evt) {
        LTopic.setText("<html>" + AresFormater.getInstance().toHTML(evt.getTopic()) + "<html>");
    }

    @Override
    public void onConnect(HClientEvent evt) {
        main.write(((char) 3) + "02Connected, starting handshake");
    }

    @Override
    public void onDisconnect(HClientEvent evt) {

        main.write(((char) 3) + "04Disconnected");
    }

    @Override
    public void onUserList(HClientUserListevent evt) {
        System.out.println(evt.getUser().getUsername() + " " + evt.getUser().getPublicIp() + "(" + evt.getUser().getPrivateIp() + ")");
        addUser(evt.getUser());
    }

    @Override
    public void onUserListEnds(HClientEvent evt) {
        SPUsers.repaint();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //LUsers.repaint();
                PList.repaint();
            }
        });

        System.out.println("User List Ended");
    }

    @Override
    public void onUserUpdate(HClientUserUpdateEvent evt) {
        updateusers();
    }

    @Override
    public void onServerAck(HClientAckEvent evt) {
        System.out.println("*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-" + evt.getChannelName() + "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-");
        main.write(AresFormater.FOREGROUND_CHARACTER + "02Logged in, retrieving user's list...");
        event.onNameChange(this, evt.getChannelName());
    }

    @Override
    public void onUserIsIgnorinYou(HClientUserEvent evt) {
        ((ChatPane) TPTabs.getSelectedComponent()).write(AresFormater.FOREGROUND_CHARACTER + "04" + evt.getUser() + " is ignoring you");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BBackground;
    private javax.swing.JButton BBold;
    private javax.swing.JButton BEmoticon;
    private javax.swing.JButton BForeground;
    private javax.swing.JButton BItalic;
    private javax.swing.JButton BUnderline;
    private javax.swing.JLabel LTopic;
    private javax.swing.JLabel LURL;
    private javax.swing.JList LUsers;
    private javax.swing.JMenuItem MICopy;
    private javax.swing.JMenuItem MIIgnore_Unignore;
    private javax.swing.JPanel PChat;
    private javax.swing.JPanel PList;
    private javax.swing.JPopupMenu PMUserListMenu;
    private javax.swing.JSplitPane SPSplitter;
    private javax.swing.JScrollPane SPUsers;
    private javax.swing.JToolBar TBBar;
    private javax.swing.JTextField TFInput;
    private javax.swing.JTabbedPane TPTabs;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler4;
    // End of variables declaration//GEN-END:variables

      @Override
    public void onClientRected(HClientRedirectedEvent evt)
    {
        main.write(AresFormater.FOREGROUND_CHARACTER + "02Your are been redirected to "+evt.getReadson()+" ("+evt.getIp().getHostAddress()+":"+evt.getPort()+")" );
        try
        {
            client.disconnect();
            client.connect(evt.getIp(),evt.getPort());
        } catch (IOException ex)
        {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }

}
